package hu.bme.mit.yakindu.analysis.workhere;

import java.util.HashSet;
import java.util.Set;

import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.junit.Test;
import org.yakindu.sct.model.sgraph.State;
import org.yakindu.sct.model.sgraph.Statechart;
import org.yakindu.sct.model.sgraph.impl.TransitionImpl;

import hu.bme.mit.model2gml.Model2GML;
import hu.bme.mit.yakindu.analysis.modelmanager.ModelManager;

public class Main {
	@Test
	public void test() {
		main(new String[0]);
	}
	
	public static void main(String[] args) {
		Set<State> states = new HashSet<State>();
		Set<State> sources = new HashSet<State>();
		
		ModelManager manager = new ModelManager();
		Model2GML model2gml = new Model2GML();
		
		// Loading model
		EObject root = manager.loadModel("model_input/example.sct");
		
		// Reading model
		Statechart s = (Statechart) root;
		TreeIterator<EObject> iterator = s.eAllContents();
		while (iterator.hasNext()) {
			EObject content = iterator.next();
			if(content instanceof State) {
				State state = (State) content;
				states.add(state);
				System.out.println(state.getName());
				System.out.println("\n");
				
			}
			else if (content instanceof TransitionImpl) {
				TransitionImpl state = (TransitionImpl) content;
				sources.add((State) state.basicGetSource());
				System.out.println(state.getSource().getName() + "->" + state.getTarget().getName());
				System.out.println("\n");
			}
		}
		
		for(State state : states) {
			boolean nottrap = false;
			for (State source : sources) {
				if (source == state) {
					nottrap = true;
					break;
				}
			}
			
			if (nottrap == false) {
				System.out.println("Trap: " + state.getName() + "\n");
			}
		}
		
		// Transforming the model into a graph representation
		String content = model2gml.transform(root);
		// and saving it
		manager.saveFile("model_output/graph.gml", content);
	}
}
